name: Release

on:
  push:
    tags:
      - "**/v*"

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # Fetch all history and tags so we can find the previous tag
        with:
          fetch-depth: 0

      - name: Get Bazel
        uses: bazel-contrib/setup-bazel@0.8.1
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Generate Changelog
        id: generate_changelog
        run: |
          # The full tag being pushed, e.g., "vcu/v1.2.3"
          FULL_TAG="${{ github.ref_name }}"

          # Extract the project/component name, e.g., "vcu"
          # This handles both "vcu/v1.2.3" and a root-level "v1.2.3"
          if [[ "$FULL_TAG" == *"/"* ]]; then
            PROJECT_NAME="${FULL_TAG%/*}"
            # Create a search pattern for this project's tags
            TAG_PATTERN="${PROJECT_NAME}/v*"
          else
            PROJECT_NAME=""
            TAG_PATTERN="v*"
          fi

          echo "Current tag: ${FULL_TAG}"
          echo "Project component: ${PROJECT_NAME}"
          echo "Tag pattern: ${TAG_PATTERN}"

          # Get the previous tag for this specific component by listing all matching tags,
          # sorting them by version, and picking the second to last one.
          PREVIOUS_TAG=$(git tag -l "${TAG_PATTERN}" | sort -V | tail -n 2 | head -n 1)

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found for this component. Using first commit."
            # Fallback: get all commits on the current branch
            LOG_MESSAGES=$(git log --pretty=format:'- %s (%h)')
          else
            echo "Found previous tag: ${PREVIOUS_TAG}"
            # Generate the log from the previous tag to the current one (HEAD)
            LOG_MESSAGES=$(git log "${PREVIOUS_TAG}"..HEAD --pretty=format:'- %s (%h)')
          fi

          echo "Generated changelog:"
          echo "$LOG_MESSAGES"

          # Use a heredoc to preserve multiline output for the next step
          {
            echo "changelog<<EOF"
            echo "$LOG_MESSAGES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create Release
        id: create_release # Added an ID to reference the upload_url later
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changelog
            ${{ steps.generate_changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Build and Upload Release Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          FULL_TAG="${{ github.ref_name }}"

          if [[ "$FULL_TAG" == *"/"* ]]; then
            PROJECT_NAME="${FULL_TAG%/*}"
            MAIN_TARGET="//${PROJECT_NAME}:release"
          else
            MAIN_TARGET="//:release"
          fi

          echo "Building main target: ${MAIN_TARGET}"
          bazel build ${MAIN_TARGET} --config=release

          echo "Uploading assets..."
          # Using the upload_url from the create_release step is more robust
          for file in $(bazel cquery --output=files "${MAIN_TARGET}"); do
            echo "Uploading $file"
            gh release upload ${{ github.ref_name }} "$file" --clobber
          done
