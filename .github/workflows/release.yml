# .github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - "**/v*"

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Bazel
        uses: bazel-contrib/setup-bazel@0.8.1
        with:
          bazelisk-cache: true
          disk-cache: ${{ github.workflow }}
          repository-cache: true

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ${{ github.event.head_commit.message }}
            New release for ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Build and Upload Release Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          FULL_TAG="${{ github.ref_name }}"

          # Determine Bazel targets based on the tag structure
          if [[ "$FULL_TAG" == *"/"* ]]; then
            # Tag has a prefix, e.g., "my-app/v1.0.0"
            PROJECT_NAME="${FULL_TAG%/*}"
            MAIN_TARGET="//${PROJECT_NAME}:release"
          else
            MAIN_TARGET="//:release"
          fi

          echo "Building main target: ${MAIN_TARGET}"

          # Build both targets in one command
          bazel build ${MAIN_TARGET}

          echo "Uploading assets..."
          # Query for all output files from both targets
          for file in $(bazel cquery --output=files "${MAIN_TARGET}"); do
            echo "Uploading $file"
            gh release upload ${{ github.ref_name }} "$file" --clobber
          done
